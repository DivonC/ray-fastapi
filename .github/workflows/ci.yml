name: CI

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.11", "3.12" ]

    env:
      # Cleaner CI logs; no spinner/emojis
      PIPENV_NOSPIN: "1"
      PIPENV_HIDE_EMOJIS: "1"
      # NOTE: We do NOT set PIPENV_VENV_IN_PROJECT here because you’re testing multiple
      # Python versions; a single .venv would collide. We cache Pipenv’s default venv dir instead.

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          # (Optional) this only caches pip wheels used to install pipenv itself
          cache: "pip"
          cache-dependency-path: Pipfile.lock

      - name: Install Pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv

      # Cache Pipenv virtualenvs (default location) keyed by Python + Pipfile.lock
      - name: Cache Pipenv venv
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: ~/.local/share/virtualenvs
          key: pipenv-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('Pipfile.lock') }}
          restore-keys: |
            pipenv-${{ runner.os }}-py${{ matrix.python-version }}-

      - name: Sync deps from lockfile
        shell: bash
        run: |
          # Create/select venv for this Python version
          pipenv --python ${{ matrix.python-version }}
          # Install from lock if present; else create it (fallback)
          if [ -f Pipfile.lock ]; then
            pipenv sync --dev
          else
            pipenv install --dev
          fi
          # Useful debug: show the venv path to verify cache usage
          echo "Using venv: $(pipenv --venv)"

      - name: Run tests
        run: pipenv run pytest -q
